---
title: "Model"
format:
  html:
    code-fold: true
---

```{python}
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import numpy as np
import duckdb
from pandas import get_dummies
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import mean_squared_error, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
```

## Get Data

```{python}
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()

df.head(3)
```

## Define Model and Fit

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

## Turn into Vetiver Model

```{python}
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
```

## Save to Board

```{python, message=FALSE, warning=FALSE}
from pins import board_folder
from vetiver import vetiver_pin_write

model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
```

## Turn model into API

```{python}
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
```



## Additional KNN model


```{python, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()

df.head(3)

```

```{python}
# Encoding target variable
label_encoder = LabelEncoder()
df['species_encoded'] = label_encoder.fit_transform(df['species'])

# Preparing features
X = get_dummies(df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'sex']], drop_first=True)
y = df['species_encoded']

# Scaling features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

```

```{python}
knn_model = KNeighborsClassifier(n_neighbors=4)
knn_model.fit(X_train, y_train)

```

```{python}
y_pred = knn_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

# Optional: Other classification metrics
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

```






